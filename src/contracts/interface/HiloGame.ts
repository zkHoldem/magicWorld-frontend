/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface HiloGameInterface extends utils.Interface {
  functions: {
    "INVALID_INDEX()": FunctionFragment;
    "cardConfig()": FunctionFragment;
    "createGame()": FunctionFragment;
    "dealCard0ToPlayer0(uint256)": FunctionFragment;
    "dealCard1ToPlayer1(uint256)": FunctionFragment;
    "endGame(uint256)": FunctionFragment;
    "guess(uint256,uint8)": FunctionFragment;
    "isGuessRight(uint256,uint256)": FunctionFragment;
    "isPlayerGuessed(uint256,uint256)": FunctionFragment;
    "largestHiloId()": FunctionFragment;
    "moveToShuffleStage(uint256)": FunctionFragment;
    "openCard0(uint256)": FunctionFragment;
    "openCard1(uint256)": FunctionFragment;
    "shuffle()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INVALID_INDEX"
      | "cardConfig"
      | "createGame"
      | "dealCard0ToPlayer0"
      | "dealCard1ToPlayer1"
      | "endGame"
      | "guess"
      | "isGuessRight"
      | "isPlayerGuessed"
      | "largestHiloId"
      | "moveToShuffleStage"
      | "openCard0"
      | "openCard1"
      | "shuffle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVALID_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cardConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dealCard0ToPlayer0",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealCard1ToPlayer1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "guess",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuessRight",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerGuessed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "largestHiloId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveToShuffleStage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openCard0",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openCard1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "shuffle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "INVALID_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cardConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealCard0ToPlayer0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealCard1ToPlayer1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGuessRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerGuessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "largestHiloId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveToShuffleStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openCard0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openCard1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shuffle", data: BytesLike): Result;

  events: {
    "CreateGame(uint256,uint256,address)": EventFragment;
    "EndGame(uint256,uint256,address,bool)": EventFragment;
    "Guess(uint256,uint256,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Guess"): EventFragment;
}

export interface CreateGameEventObject {
  hiloId: BigNumber;
  shuffleId: BigNumber;
  creator: string;
}
export type CreateGameEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CreateGameEventObject
>;

export type CreateGameEventFilter = TypedEventFilter<CreateGameEvent>;

export interface EndGameEventObject {
  hiloId: BigNumber;
  playerIdx: BigNumber;
  player: string;
  result: boolean;
}
export type EndGameEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean],
  EndGameEventObject
>;

export type EndGameEventFilter = TypedEventFilter<EndGameEvent>;

export interface GuessEventObject {
  hiloId: BigNumber;
  playerIdx: BigNumber;
  player: string;
  selection: number;
}
export type GuessEvent = TypedEvent<
  [BigNumber, BigNumber, string, number],
  GuessEventObject
>;

export type GuessEventFilter = TypedEventFilter<GuessEvent>;

export interface HiloGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HiloGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    cardConfig(overrides?: CallOverrides): Promise<[number]>;

    createGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealCard0ToPlayer0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealCard1ToPlayer1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endGame(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guess(
      hiloId: PromiseOrValue<BigNumberish>,
      selection: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGuessRight(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPlayerGuessed(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    largestHiloId(overrides?: CallOverrides): Promise<[BigNumber]>;

    moveToShuffleStage(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openCard0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openCard1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shuffle(overrides?: CallOverrides): Promise<[string]>;
  };

  INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  cardConfig(overrides?: CallOverrides): Promise<number>;

  createGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealCard0ToPlayer0(
    hiloId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealCard1ToPlayer1(
    hiloId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endGame(
    hiloId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guess(
    hiloId: PromiseOrValue<BigNumberish>,
    selection: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGuessRight(
    hiloId: PromiseOrValue<BigNumberish>,
    playerIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPlayerGuessed(
    hiloId: PromiseOrValue<BigNumberish>,
    playerIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  largestHiloId(overrides?: CallOverrides): Promise<BigNumber>;

  moveToShuffleStage(
    hiloId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openCard0(
    hiloId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openCard1(
    hiloId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shuffle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    cardConfig(overrides?: CallOverrides): Promise<number>;

    createGame(overrides?: CallOverrides): Promise<void>;

    dealCard0ToPlayer0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dealCard1ToPlayer1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endGame(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    guess(
      hiloId: PromiseOrValue<BigNumberish>,
      selection: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isGuessRight(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPlayerGuessed(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    largestHiloId(overrides?: CallOverrides): Promise<BigNumber>;

    moveToShuffleStage(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openCard0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openCard1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shuffle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateGame(uint256,uint256,address)"(
      hiloId?: PromiseOrValue<BigNumberish> | null,
      shuffleId?: null,
      creator?: null
    ): CreateGameEventFilter;
    CreateGame(
      hiloId?: PromiseOrValue<BigNumberish> | null,
      shuffleId?: null,
      creator?: null
    ): CreateGameEventFilter;

    "EndGame(uint256,uint256,address,bool)"(
      hiloId?: PromiseOrValue<BigNumberish> | null,
      playerIdx?: null,
      player?: null,
      result?: null
    ): EndGameEventFilter;
    EndGame(
      hiloId?: PromiseOrValue<BigNumberish> | null,
      playerIdx?: null,
      player?: null,
      result?: null
    ): EndGameEventFilter;

    "Guess(uint256,uint256,address,uint8)"(
      hiloId?: PromiseOrValue<BigNumberish> | null,
      playerIdx?: null,
      player?: null,
      selection?: null
    ): GuessEventFilter;
    Guess(
      hiloId?: PromiseOrValue<BigNumberish> | null,
      playerIdx?: null,
      player?: null,
      selection?: null
    ): GuessEventFilter;
  };

  estimateGas: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    cardConfig(overrides?: CallOverrides): Promise<BigNumber>;

    createGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealCard0ToPlayer0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealCard1ToPlayer1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endGame(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guess(
      hiloId: PromiseOrValue<BigNumberish>,
      selection: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGuessRight(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPlayerGuessed(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    largestHiloId(overrides?: CallOverrides): Promise<BigNumber>;

    moveToShuffleStage(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openCard0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openCard1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shuffle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cardConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealCard0ToPlayer0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealCard1ToPlayer1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endGame(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guess(
      hiloId: PromiseOrValue<BigNumberish>,
      selection: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGuessRight(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPlayerGuessed(
      hiloId: PromiseOrValue<BigNumberish>,
      playerIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    largestHiloId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveToShuffleStage(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openCard0(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openCard1(
      hiloId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shuffle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
